import json

from autotest_lib.server import autotest, hosts, subcommand
from autotest_lib.server import utils

TEST_URL = 'http://ceph.newdream.net:8116/tarball/master/cfuse_client_server.tar.bz2'

def run(pair):
    (client_name, server_name) = pair
    tag_name = '{c}_{s}'.format(c=client_name, s=server_name)

    server = hosts.create_host(server_name)
    client = hosts.create_host(client_name)

    server_at = autotest.Autotest(server)
    client_at = autotest.Autotest(client)

    # we exploit the fact that JSON is always valid python, and use
    # that as a safe method of passing in data to the code template
    template = "job.cache=False; job.run_test(**{data})"

    server_control_file = template.format(data=json.dumps(dict(
                url=TEST_URL,
                role='server',
                client_ip=client.ip,
                server_ip=server.ip,
                tag=tag_name,
            )))
    client_control_file = template.format(data=json.dumps(dict(
                url=TEST_URL,
                role='client',
                client_ip=client.ip,
                server_ip=server.ip,
                tag=tag_name,
            )))

    server_command = subcommand.subcommand(server_at.run,
                     [server_control_file, server.hostname])
    client_command = subcommand.subcommand(client_at.run,
                     [client_control_file, client.hostname])

    subcommand.parallel([server_command, client_command])

# grab the pairs (and failures)
(pairs, failures) = utils.form_ntuples_from_machines(machines, 2)

# log the failures
for failure in failures:
    job.record("FAIL", failure[0], "cfuse_client_server", failure[1])

# now run through each pair and run
job.cache = False
job.parallel_simple(run, pairs, log=False)
